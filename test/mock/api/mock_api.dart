// Mocks generated by Mockito 5.4.0 from annotations
// in sharing_session/test/mock/api/api.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sharing_session/api/api.dart' as _i4;
import 'package:sharing_session/models/models.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosts_1 extends _i1.SmartFake implements _i3.Posts {
  _FakePosts_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsers_2 extends _i1.SmartFake implements _i3.Users {
  _FakeUsers_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseDioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseDioClient extends _i1.Mock implements _i4.BaseDioClient {
  MockBaseDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);
}

/// A class which mocks [CommentsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommentsApi extends _i1.Mock implements _i4.CommentsApi {
  MockCommentsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Comments>> getListComments({String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListComments,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<List<_i3.Comments>>.value(<_i3.Comments>[]),
      ) as _i5.Future<List<_i3.Comments>>);
}

/// A class which mocks [PostsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsApi extends _i1.Mock implements _i4.PostsApi {
  MockPostsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Posts>> getListPosts() => (super.noSuchMethod(
        Invocation.method(
          #getListPosts,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Posts>>.value(<_i3.Posts>[]),
      ) as _i5.Future<List<_i3.Posts>>);
  @override
  _i5.Future<_i3.Posts> getPostById({String? id}) => (super.noSuchMethod(
        Invocation.method(
          #getPostById,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<_i3.Posts>.value(_FakePosts_1(
          this,
          Invocation.method(
            #getPostById,
            [],
            {#id: id},
          ),
        )),
      ) as _i5.Future<_i3.Posts>);
}

/// A class which mocks [UsersApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersApi extends _i1.Mock implements _i4.UsersApi {
  MockUsersApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Users> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i5.Future<_i3.Users>.value(_FakeUsers_2(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Users>);
}
